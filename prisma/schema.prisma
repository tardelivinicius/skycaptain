generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
// }


datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  username      String?    @unique
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  email         String?    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  preference    UserPreference? @relation(fields: [preferenceId], references: [id])
  preferenceId Int?     @unique
  @@map("users")
}

model UserPreference {
  id          Int   @id @default(autoincrement())
  user        User?
  currency    String
  weight      String
  countryCode String @map("country_code")
  @@map("user_preferences")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}