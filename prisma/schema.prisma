generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  username      String?         @unique
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  preference    UserPreference? @relation(fields: [preferenceId], references: [id])
  preferenceId  Int?            @unique
  level        UserLevel? @relation(fields: [levelId], references: [id])
  levelId      Int?
  airports     UserAirportHub[]
  aircrafts    UserAircraft[]
  isFirstAccess  Boolean @map("first_access") @default(true)
  licenses     UserAirportLicense[]
  @@map("users")
}

model UserPreference {
  id          Int     @id @default(autoincrement())
  user        User?
  userId      String? @map("user_id")
  currency    String
  weight      String
  countryCode String  @map("country_code")

  @@map("user_preferences")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserLevel {
  id               Int     @id @default(autoincrement())
  title            String
  order            Int
  totalXP          Int @map("total_xp")
  multiplierFactor Int @map("multiplier_factor") @default(0) 
  isActive         Boolean @default(true)
  User             User[]
  @@map("user_levels")
}

model Airport {
  id                Int      @id @default(autoincrement())
  name              String   
  iata_code         String?  
  icao_code         String? 
  lat               Float
  lng               Float
  country_code      String 
  is_international  Boolean @default(false)
  user_airports     UserAirportHub[]
  licenses          UserAirportLicense[]
  @@map("airports")
}

model UserAirportHub {
  id        Int       @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  airport   Airport?  @relation(fields: [airportId], references: [id])
  airportId Int
  is_main   Boolean  @default(true)
  @@map("user_airport_hubs")
}

model Aircraft {
  id              Int       @id @default(autoincrement())
  model           String
  manufacturer    String
  iata_code       String?
  icao_code       String?
  user_aircrafts  UserAircraft[]
  @@map("aircrafts")
}

model UserAircraft {
  id        Int       @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aircraft  Aircraft?  @relation(fields: [aircraftId], references: [id])
  aircraftId Int
  is_main   Boolean  @default(true)
  @@map("user_aicrafts")
}

model UserAirportLicense {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  airport   Airport  @relation(fields: [airportId], references: [id], onDelete: Cascade)
  airportId Int
  is_active Boolean  @default(true)

  @@map("user_airport_licenses")
}